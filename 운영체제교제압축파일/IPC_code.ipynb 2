{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## IPC 코드 예제"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 기본 IPC 기법은 리눅스(UNIX 계열)의 전통적인 C언어 기반에서 활용하는 것이 일반적임\n",
    "- 파이썬의 경우, Redis (In-Memory 데이터베이스)의 메커니즘을 활용한 IPC 기법을 많이 활용함"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Redis PubSub 메커니즘\n",
    "- 일종의 message queue 로 이해할 수 있음 (구현은 매우 다름)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 테스트 환경\n",
    "- 맥 또는 리눅스\n",
    "  - 윈도우 환경의 경우, AWS EC2에서 실행 권장\n",
    "\n",
    "\n",
    "- redis 설치\n",
    "  - 맥\n",
    "    ```\n",
    "    1. brew install redis    \n",
    "    2. brew services start redis\n",
    "    ```\n",
    "\n",
    "  - 리눅스\n",
    "    ```\n",
    "    1. sudo add-apt-repository ppa:chris-lea/redis-server\n",
    "    2. sudo apt-get update\n",
    "    3. sudo apt-get install redis-server\n",
    "       - redis client 도 함께 설치됨\n",
    "    4. sudo vi /etc/redis/redis.conf\n",
    "    5. #bind 127.0.0.1 -> bind 0.0.0.0 로 변경 후 저장\n",
    "    6. sudo service redis restart    \n",
    "    ```\n",
    "\n",
    "- 파이썬 redis 라이브러리 설치\n",
    "  ```\n",
    "  pip install redis\n",
    "  ```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 데이터 수신 코드\n",
    "- 주요 코드\n",
    "  - redis.Redis(): default로 자기 PC에 있는 redis에 접속함\n",
    "  - pubsub(): pubsub 메커니즘을 사용하기 위한 인스턴스 생성\n",
    "  - subscribe(채널명=함수명): 해당 채널명으로 데이터 수신시, 명시된 함수를 호출\n",
    "  - run_in_thread(sleep_time=시간)\n",
    "    - 해당 채널명의 데이터 수신을 위해, 별도 쓰레드를 생성해서, 루프를 돌며 해당 채널의 데이터를 확인하는 기능\n",
    "    - sleep_time 명시를 통해서, 루프를 돌때, 일정시간 sleep 하여, 해당 채널 외에 프로세스가 처리해야하는 바를 처리함 (보통 0.001 로 넣음)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time, redis\n",
    "\n",
    "redis_ins = redis.Redis()\n",
    "pubsub_ins = redis_ins.pubsub()\n",
    "\n",
    "def handler(message):\n",
    "    print(message['data'].decode('utf-8'))\n",
    "    thread.stop()\n",
    "\n",
    "pubsub_ins.subscribe(my_channel=handler)\n",
    "thread = pubsub_ins.run_in_thread(sleep_time=0.001)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 데이터 송신 코드\n",
    "- 주요 코드\n",
    "  - redis.Redis(): default로 자기 PC에 있는 redis에 접속함\n",
    "  - pubsub(): pubsub 메커니즘을 사용하기 위한 인스턴스 생성\n",
    "  - publish(채널명, 데이터): 해당 채널명으로 데이터를 송신"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import redis\n",
    "\n",
    "redis_ins = redis.Redis()\n",
    "pubsub_ins = redis_ins.pubsub()\n",
    "\n",
    "redis_ins.publish('my_channel', 'example data')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 멀티 프로세스 예제"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 결과 수집 프로그램"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time, redis\n",
    "\n",
    "redis_ins = redis.Redis()\n",
    "pubsub_ins = redis_ins.pubsub()\n",
    "\n",
    "g_count, collect_count = 0, 0\n",
    "def handler(message):\n",
    "    global g_count, collect_count\n",
    "    collect_count += 1\n",
    "    g_count += int(message['data'])\n",
    "    if collect_count == 50:\n",
    "        print (g_count)\n",
    "        print (time.time() - start)\n",
    "        thread.stop()\n",
    "\n",
    "pubsub_ins.subscribe(my_channel=handler)\n",
    "start = time.time()\n",
    "thread = pubsub_ins.run_in_thread(sleep_time=0.001)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- 결과 계산 프로그램\n",
    "  - 멀티 프로세스를 사용하여, 계산량을 분리하고 병렬 처리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import multiprocessing, time, os, redis\n",
    "\n",
    "redis_ins = redis.Redis()\n",
    "pubsub_ins = redis_ins.pubsub()\n",
    "\n",
    "def process_main():\n",
    "    print ('parent process:', os.getppid())\n",
    "    print ('process id:', os.getpid())\n",
    "    g_count = 0\n",
    "    for i in range(100000):\n",
    "        g_count = g_count + 1\n",
    "    redis_ins.publish('my_channel', g_count)\n",
    "\n",
    "processes = list()\n",
    "print ('Main process:', os.getpid(), '\\n')\n",
    "for i in range(50):\n",
    "    process = multiprocessing.Process(target=process_main, args=())\n",
    "    processes.append(process)\n",
    "\n",
    "for process in processes:\n",
    "    process.start()\n",
    "for process in processes:\n",
    "    process.join()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 참고: 파이프 예제 (네임드 파이프, Named Pipe)\n",
    "- 맥/리눅스 환경에서만 지원\n",
    "- OS 지원을 받아야 하므로, OS에 따라 구현이 다른 경우가 있음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "PIPE_FILENAME = './namedpipe_test'\n",
    "\n",
    "if not os.path.exists(PIPE_FILENAME):\n",
    "    os.mkfifo(PIPE_FILENAME)\n",
    "\n",
    "if os.path.exists(PIPE_FILENAME):\n",
    "    fp_fifo = open(PIPE_FILENAME, \"w\")\n",
    "\n",
    "for i in range(128):\n",
    "    fp_fifo.write(\"Hello, I am a Process\\n\")\n",
    "    fp_fifo.write(\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "PIPE_FILENAME = './fifo-test'\n",
    "\n",
    "if os.path.exists(PIPE_FILENAME):\n",
    "    fp_fifo = open(PIPE_FILENAME, \"r\")\n",
    "    i = 0\n",
    "    while True:\n",
    "        with open(PIPE_FILENAME, 'r') as fifo:\n",
    "            data = fifo.read()\n",
    "            line = data.split('\\n')\n",
    "            for str in line:\n",
    "                i = i+1\n",
    "                print(str + \"%4d\" % i)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
